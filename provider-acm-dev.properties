#this properties encoding is "UTF-8"
#日志采集率
spring.sleuth.sampler.percentage=1.0
log.output.logstash.host=192.168.9.39
log.output.logstash.port=4560

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=192.168.9.39
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=dutiantech.com
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=2000

# 公共 Redis
# Redis数据库索引（默认为0）
pub.redis.database=0
# Redis服务器地址
pub.redis.host=192.168.9.39
# Redis服务器连接端口
pub.redis.port=6379
# Redis服务器连接密码（默认为空）
pub.redis.password=dutiantech.com
# 连接超时时间（毫秒）
pub.redis.timeout=2000
# 连接池最大连接数（使用负值表示没有限制）
pub.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
pub.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
pub.redis.pool.max-idle=8
# 连接池中的最小空闲连接
pub.redis.pool.min-idle=1

#spring datasource参数配置
#指定数据源类型
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#数据库url，mysql指定zeroDateTimeBehavior=convertToNull为防止mysql对象timestamp为空时转换为java.util.Date异常
spring.datasource.url=jdbc:mysql://rm-xxx.mysql.rds.xxx.com:3306/acm?zeroDateTimeBehavior=convertToNull
#数据库账号
spring.datasource.username=dev
#数据库密码
spring.datasource.password=dev
#数据库驱动类
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#hikari 数据源 参数配置
#连接池中允许的最大连接数
spring.datasource.hikari.maximum-pool-size=60
#连接池中允许的最小连接数
spring.datasource.hikari.minimum-idle=10
# 一个连接的生命时长（毫秒），超时而且没被使用则被释放
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.read-only=false
#等待连接数超时的时间，单位毫秒
spring.datasource.hikari.connection-timeout=30000
#一个连接idle状态的最大时长（毫秒）,超时释放连接
spring.datasource.hikari.idleTimeout=600000
#验证数据源
spring.datasource.hikari.connection-test-query=select 1
#运行初始化时根据JPA对数据库进行操作,update：根据实体更新数据库结构，careate 删除以前的数据库按实体从新生成
#spring.jpa.properties.hibernate.hbm2ddl.auto=update
#是否显示sql
spring.jpa.show-sql=true

################## eureka client 配置  #####################
#注册中心
eureka.client.serviceUrl.defaultZone=http://192.168.9.39:9000/eureka,http://192.168.9.39:10001/eureka,http://192.168.9.39:10002/eureka
#健康检查
eureka.client.healthcheck.enabled=true
#定时拉取eureka的注册服务列表
eureka.client.fetch-registry=true
#拉取服务注册列表间隔周期，默认30秒
eureka.client.registry-fetch-interval-seconds=6
################## 服务实例信息配置 ######################
#设置注册IP
#eureka.instance.ip-address=192.168.9.38
eureka.instance.prefer-ip-address=true
#eureka server中显示名称
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${server.port}
#eureka.instance.instance-id=${spring.application.name}-${random.value}
#eureka注册实例的hostname改为IP
eureka.instance.hostname=${spring.cloud.client.ipAddress}
#eureka client发送心跳给server端的频率，默认30秒
eureka.instance.lease-renewal-interval-in-seconds=6

#spring http拦截器配置，处理中文参数
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true

#tomcat encoding配置
#server.tomcat.uri-encoding=UTF-8

#feign client是否开启熔断机制
feign.hystrix.enabled=true
#feign标准配置
feign.compression.request.enabled=true
feign.compression.response.enabled=true
feign.compression.request.mime-types=text/xml,application/xml,application/json
feign.compression.request.min-request-size=2048


#触发熔断,超时毫秒
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=12000

#ribbon(负载)，全局配置
#feign也依赖ribbon负载
#ribbon(负载)，请求连接超时时间，毫秒
ribbon.ConnectTimeout=3000
#ribbon(负载)，连接后读取返回内容超时时间，毫秒
ribbon.ReadTimeout=3000
#ribbon(负载)，是否开启重新尝试请求连接
ribbon.OkToRetryOnAllOperations=false
#ribbon(负载)，负载机制
ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule

#ribbon(负载)，针对某个服务进行配置
#XXXService.ribbon.ConnectTimeout=5000
#XXXService.ribbon.ReadTimeout=5000
#XXXService.ribbon.OkToRetryOnAllOperations=true
#XXXService.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule

#xxl-job配置
xxl.job.admin.addresses=http://192.168.9.39:8081
### 执行器配置
#执行器名
xxl.job.executor.appname=provider-acm
#执行器端口(非web端口)
xxl.job.executor.port=7006
### xxl-job, access token
xxl.job.accessToken=eyJzY29wZSI6IkFBxxxIiwiZGVhZGxpbmUiOjE1NDJ9

#禁止程序启动就执行springbatch任务
spring.batch.job.enabled=false

文件系统-ftp配置
file.ftp.userName=ftpuser
file.ftp.password=1357924681
file.ftp.host=192.168.9.39
file.ftp.port=21
#导出的Excel，主文件夹名
file.ftp.exportExcel.floder=exportExcel
file.http.downloadUrl=http://192.168.9.39:34561

# ------------------ 大吉大利，今晚吃鸡 BEGIN ------------------------
# 调有前 压测300万条消息，丢失2000左右
# 调优后 压3000万条消息无丢失
spring.rabbitmq.publisher-confirms=true
spring.rabbitmq.cache.channel.size=100
spring.rabbitmq.template.mandatory=true
# ------------------ 大吉大利，今晚吃鸡 END    ------------------------
#rabbitmq 配置
spring.rabbitmq.addresses=101.201.238.54:7201

#账务处理
spring.rabbitmq.acm.notify.username=xxx1
spring.rabbitmq.acm.notify.password=xxx
spring.rabbitmq.acm.notify.virtualHost=/acm_notify
#NONE即使无响应或者发生异常均会通知队列消费成功 NONE MANUAL(手工确认消费) AUTO(自动)
spring.rabbitmq.acm.notify.listener.acknowledgeMode=AUTO
#mq并发监听数
spring.rabbitmq.acm.notify.prefetchCount=5
spring.rabbitmq.acm.notify.concurrentConsumers=10
spring.rabbitmq.acm.notify.maxConcurrentConsumers=20

#日终传票处理
spring.rabbitmq.acm.voch.username=acm_pub_01
spring.rabbitmq.acm.voch.password=allscore
spring.rabbitmq.acm.voch.virtualHost=/acm_public
#NONE即使无响应或者发生异常均会通知队列消费成功 NONE MANUAL(手工确认消费) AUTO(自动)
spring.rabbitmq.acm.voch.listener.acknowledgeMode=AUTO
#mq并发监听数
spring.rabbitmq.acm.voch.prefetchCount=5
spring.rabbitmq.acm.voch.concurrentConsumers=10
spring.rabbitmq.acm.voch.maxConcurrentConsumers=20
